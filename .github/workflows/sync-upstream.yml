name: Sync from Upstream

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Configure git
        run: |
          git config user.name "Sync Bot"
          git config user.email "sync-bot@tinyland.dev"
      
      - name: Add upstream remote
        run: |
          git remote add upstream https://gitlab.tinyland.dev/zentaisei.git || true
          git fetch upstream
      
      - name: Check for changes
        id: check_changes
        run: |
          # Get the latest commit from upstream for our package path
          UPSTREAM_COMMIT=$(git log -1 --format=%H upstream/main -- packages/tsd)
          CURRENT_COMMIT=$(git log -1 --format=%H HEAD -- src/)
          
          if [ "$UPSTREAM_COMMIT" != "$CURRENT_COMMIT" ] || [ "${{ inputs.force }}" == "true" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync using git subtree
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Create a new branch for the sync
          SYNC_BRANCH="sync/upstream-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $SYNC_BRANCH
          
          # Update the subtree split branch
          git fetch monorepo
          git branch -f split-tsd monorepo/split-tsd || git checkout -b split-tsd monorepo/split-tsd
          
          # Pull changes using subtree
          git subtree pull --prefix=src monorepo split-tsd --squash -m "chore: sync from upstream monorepo
          
          Upstream commit: ${{ steps.check_changes.outputs.upstream_commit }}
          Package path: packages/tsd"
          
          echo "sync_branch=$SYNC_BRANCH" >> $GITHUB_ENV
      
      - name: Run tests
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          cd src
          npm ci
          npm test
          npm run lint
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}
          branch: ${{ env.sync_branch }}
          title: 'ðŸ”„ Sync from upstream monorepo'
          body: |
            ## Automated Sync from Upstream
            
            This PR synchronizes changes from the upstream monorepo.
            
            **Upstream commit**: `${{ steps.check_changes.outputs.upstream_commit }}`
            **Package path**: `packages/tsd`
            
            ### Changes included:
            - Source code updates from `packages/tsd`
            - Type definition updates
            - Core test updates
            
            ### Not included:
            - Demo application changes (local only)
            - E2E test changes (local only)
            - Documentation changes (local only)
            
            ---
            *This is an automated PR. Please review the changes before merging.*
          labels: |
            sync
            automated
          assignees: |
            ${{ github.repository_owner }}
      
      - name: Auto-merge if tests pass
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Wait for CI to complete
          gh pr merge --auto --squash ${{ env.sync_branch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}