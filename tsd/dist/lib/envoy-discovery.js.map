{
  "version": 3,
  "sources": ["../../src/lib/envoy-discovery.ts"],
  "sourcesContent": ["/**\n * Envoy auto-discovery for Kubernetes environments\n */\n\nexport interface EnvoyConfig {\n  endpoint: string;\n  isEnvoy: boolean;\n  environment: 'development' | 'kubernetes' | 'production';\n  protocol: 'grpc-web' | 'http-json';\n}\n\nexport class EnvoyDiscovery {\n  private static instance: EnvoyDiscovery;\n  private config: EnvoyConfig;\n\n  private constructor() {\n    this.config = this.detectEnvironment();\n  }\n\n  static getInstance(): EnvoyDiscovery {\n    if (!this.instance) {\n      this.instance = new EnvoyDiscovery();\n    }\n    return this.instance;\n  }\n\n  private detectEnvironment(): EnvoyConfig {\n    // Check for Kubernetes environment variables\n    const isKubernetes = this.isRunningInKubernetes();\n\n    if (isKubernetes) {\n      // In Kubernetes, check for Envoy sidecar\n      const envoyEndpoint = this.discoverEnvoySidecar();\n      if (envoyEndpoint) {\n        console.log('[TSd] Detected Envoy sidecar in Kubernetes:', envoyEndpoint);\n        return {\n          endpoint: envoyEndpoint,\n          isEnvoy: true,\n          environment: 'kubernetes',\n          protocol: 'grpc-web',\n        };\n      }\n    }\n\n    // Check for standalone Envoy proxy\n    const standaloneEnvoy = this.discoverStandaloneEnvoy();\n    if (standaloneEnvoy) {\n      console.log('[TSd] Detected standalone Envoy proxy:', standaloneEnvoy);\n      return {\n        endpoint: standaloneEnvoy,\n        isEnvoy: true,\n        environment: 'production',\n        protocol: 'grpc-web',\n      };\n    }\n\n    // Default to development mode with HTTP/JSON\n    console.log('[TSd] Running in development mode with HTTP/JSON');\n    return {\n      endpoint: typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000',\n      isEnvoy: false,\n      environment: 'development',\n      protocol: 'http-json',\n    };\n  }\n\n  private isRunningInKubernetes(): boolean {\n    if (typeof window !== 'undefined') {\n      // Client-side detection\n      // Check for common Kubernetes ingress headers or patterns\n      const hostname = window.location.hostname;\n      return (\n        hostname.includes('.cluster.local') ||\n        hostname.includes('.svc') ||\n        this.hasKubernetesHeaders()\n      );\n    } else {\n      // Server-side detection\n      return !!(\n        process.env['KUBERNETES_SERVICE_HOST'] ||\n        process.env['KUBERNETES_PORT'] ||\n        process.env['KUBERNETES_SERVICE_PORT']\n      );\n    }\n  }\n\n  private hasKubernetesHeaders(): boolean {\n    // Check if we have Kubernetes-specific headers in the response\n    // This would be set by the ingress controller\n    return false; // Will be populated from server response headers\n  }\n\n  private discoverEnvoySidecar(): string | null {\n    // In Kubernetes with Envoy sidecar (e.g., Istio), the sidecar intercepts traffic\n    // on localhost with a specific port\n    const envoyPorts = [\n      15001, // Envoy admin port\n      15000, // Envoy proxy port\n      8080, // Common Envoy HTTP port\n      9901, // Envoy admin interface\n    ];\n\n    // Check environment variables first\n    if (typeof process !== 'undefined') {\n      const envoyHost = process.env['ENVOY_HOST'] || process.env['ENVOY_PROXY_HOST'];\n      const envoyPort = process.env['ENVOY_PORT'] || process.env['ENVOY_PROXY_PORT'];\n\n      if (envoyHost && envoyPort) {\n        return `http://${envoyHost}:${envoyPort}`;\n      }\n    }\n\n    // In browser, check for common sidecar patterns\n    if (typeof window !== 'undefined') {\n      // Check if we're being proxied through Envoy by looking at headers\n      const viaHeader = document.querySelector('meta[name=\"x-envoy-upstream-service-time\"]');\n      if (viaHeader) {\n        return `${window.location.protocol}//${window.location.hostname}:15000`;\n      }\n    }\n\n    return null;\n  }\n\n  private discoverStandaloneEnvoy(): string | null {\n    // Check for standalone Envoy proxy\n    const commonEnvoyHosts = ['envoy', 'envoy-proxy', 'grpc-proxy', 'api-gateway'];\n\n    if (typeof window !== 'undefined') {\n      // In browser, check if current host matches Envoy patterns\n      const hostname = window.location.hostname;\n      for (const host of commonEnvoyHosts) {\n        if (hostname.includes(host)) {\n          return window.location.origin;\n        }\n      }\n    }\n\n    // Check environment variables\n    if (typeof process !== 'undefined') {\n      const grpcWebProxy = process.env['GRPC_WEB_PROXY_URL'] || process.env['ENVOY_PROXY_URL'];\n      if (grpcWebProxy) {\n        return grpcWebProxy;\n      }\n    }\n\n    return null;\n  }\n\n  getConfig(): EnvoyConfig {\n    return this.config;\n  }\n\n  // Allow manual override for testing\n  setConfig(config: Partial<EnvoyConfig>): void {\n    this.config = { ...this.config, ...config };\n    console.log('[TSd] Envoy config updated:', this.config);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
