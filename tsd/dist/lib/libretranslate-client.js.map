{
  "version": 3,
  "sources": ["../../src/lib/libretranslate-client.ts"],
  "sourcesContent": ["import type { TranslationProvider, Locale } from '../types.js';\n\nexport class LibreTranslateClient {\n  private cache = new Map<string, string>();\n\n  constructor(private provider: TranslationProvider) {}\n\n  async translate(text: string, from: Locale, to: Locale): Promise<string> {\n    const cacheKey = `${text}:${from}:${to}`;\n\n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)!;\n    }\n\n    let translated: string;\n\n    try {\n      switch (this.provider.type) {\n        case 'libretranslate':\n          translated = await this.translateWithLibreTranslate(text, from, to);\n          break;\n        case 'google':\n          translated = await this.translateWithGoogle(text, from, to);\n          break;\n        case 'custom':\n          if (!this.provider.customTranslate) {\n            throw new Error('Custom translate function not provided');\n          }\n          translated = await this.provider.customTranslate(text, from, to);\n          break;\n        default:\n          throw new Error(`Unknown translation provider: ${this.provider.type}`);\n      }\n\n      // Cache the result\n      this.cache.set(cacheKey, translated);\n      return translated;\n    } catch (error) {\n      console.error(`Translation error: ${error}`);\n      return text; // Fallback to original text\n    }\n  }\n\n  private async translateWithLibreTranslate(\n    text: string,\n    from: Locale,\n    to: Locale\n  ): Promise<string> {\n    const endpoint = this.provider.endpoint || 'https://libretranslate.com/translate';\n\n    console.log('[LibreTranslate] Translating:', { text, from, to, endpoint });\n\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        q: text,\n        source: from,\n        target: to,\n        format: 'text',\n        api_key: this.provider.apiKey,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('[LibreTranslate] API error:', response.status, errorText);\n      throw new Error(\n        `LibreTranslate API error: ${response.status} ${response.statusText} - ${errorText}`\n      );\n    }\n\n    const data = await response.json();\n    console.log('[LibreTranslate] Translation result:', data);\n    return data.translatedText;\n  }\n\n  private async translateWithGoogle(text: string, from: Locale, to: Locale): Promise<string> {\n    // Placeholder for Google Translate API implementation\n    // This would require proper Google Cloud credentials setup\n    throw new Error('Google Translate not implemented yet');\n  }\n}\n"],
  "mappings": ";;;;AAEO,MAAM,wBAAN,MAAM,sBAAqB;AAAA,EAGhC,YAAoB,UAA+B;AAA/B;AAFpB,wBAAQ,SAAQ,oBAAI,IAAoB;AAAA,EAEY;AAAA,EAEpD,MAAM,UAAU,MAAc,MAAc,IAA6B;AACvE,UAAM,WAAW,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAGtC,QAAI,KAAK,MAAM,IAAI,QAAQ,GAAG;AAC5B,aAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,IAChC;AAEA,QAAI;AAEJ,QAAI;AACF,cAAQ,KAAK,SAAS,MAAM;AAAA,QAC1B,KAAK;AACH,uBAAa,MAAM,KAAK,4BAA4B,MAAM,MAAM,EAAE;AAClE;AAAA,QACF,KAAK;AACH,uBAAa,MAAM,KAAK,oBAAoB,MAAM,MAAM,EAAE;AAC1D;AAAA,QACF,KAAK;AACH,cAAI,CAAC,KAAK,SAAS,iBAAiB;AAClC,kBAAM,IAAI,MAAM,wCAAwC;AAAA,UAC1D;AACA,uBAAa,MAAM,KAAK,SAAS,gBAAgB,MAAM,MAAM,EAAE;AAC/D;AAAA,QACF;AACE,gBAAM,IAAI,MAAM,iCAAiC,KAAK,SAAS,IAAI,EAAE;AAAA,MACzE;AAGA,WAAK,MAAM,IAAI,UAAU,UAAU;AACnC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,sBAAsB,KAAK,EAAE;AAC3C,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,MAAc,4BACZ,MACA,MACA,IACiB;AACjB,UAAM,WAAW,KAAK,SAAS,YAAY;AAE3C,YAAQ,IAAI,iCAAiC,EAAE,MAAM,MAAM,IAAI,SAAS,CAAC;AAEzE,UAAM,WAAW,MAAM,MAAM,UAAU;AAAA,MACrC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,GAAG;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,KAAK,SAAS;AAAA,MACzB,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,cAAQ,MAAM,+BAA+B,SAAS,QAAQ,SAAS;AACvE,YAAM,IAAI;AAAA,QACR,6BAA6B,SAAS,MAAM,IAAI,SAAS,UAAU,MAAM,SAAS;AAAA,MACpF;AAAA,IACF;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,YAAQ,IAAI,wCAAwC,IAAI;AACxD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAc,oBAAoB,MAAc,MAAc,IAA6B;AAGzF,UAAM,IAAI,MAAM,sCAAsC;AAAA,EACxD;AACF;AAnFkC;AAA3B,IAAM,uBAAN;",
  "names": []
}
