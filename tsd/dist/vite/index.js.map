{
  "version": 3,
  "sources": ["../../src/vite/index.ts"],
  "sourcesContent": ["import type { Plugin, ViteDevServer } from 'vite';\nimport type { TsdConfig, TranslationMap } from '../types.js';\nimport { createTranslationManager } from './translation-manager.js';\nimport { createGrpcWebServer } from './grpc-web-server.js';\nimport { transformHtml } from './html-transformer.js';\nimport * as path from 'node:path';\nimport { mkdir, readFile, writeFile } from 'node:fs/promises';\nimport { fileURLToPath } from 'node:url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport function tsdVitePlugin(config: TsdConfig): Plugin {\n  console.log('[TSd] Initializing plugin with config:', config);\n\n  let server: ViteDevServer;\n  let translationManager: ReturnType<typeof createTranslationManager>;\n  let grpcServer: ReturnType<typeof createGrpcWebServer>;\n\n  const defaultConfig: Partial<TsdConfig> = {\n    defaultLocale: 'en',\n    supportedLocales: ['en', 'es', 'fr', 'de', 'ja', 'zh'],\n    cacheDir: '.tsd-cache',\n    enableHMR: true,\n  };\n\n  const finalConfig = { ...defaultConfig, ...config } as Required<TsdConfig>;\n\n  return {\n    name: 'vite-plugin-tsd',\n    enforce: 'pre',\n\n    async buildStart() {\n      try {\n        // Ensure cache directory exists\n        const cacheDir = path.resolve(process.cwd(), finalConfig.cacheDir);\n        await mkdir(cacheDir, { recursive: true });\n\n        // Initialize translation manager\n        translationManager = createTranslationManager(finalConfig);\n        await translationManager.loadCache();\n      } catch (error) {\n        console.error('[TSd] Error in buildStart:', error);\n      }\n    },\n\n    async configureServer(_server) {\n      server = _server;\n\n      try {\n        // Ensure translation manager is initialized\n        if (!translationManager) {\n          console.log('[TSd] Translation manager not initialized, creating now');\n          translationManager = createTranslationManager(finalConfig);\n          await translationManager.loadCache();\n        }\n\n        // Set up gRPC-Web server for real-time translations\n        grpcServer = createGrpcWebServer(server, translationManager);\n\n        // Middleware to inject TSd runtime and serve proto file\n        server.middlewares.use(async (req, res, next) => {\n          if (req.url === '/__tsd/runtime.js') {\n            res.setHeader('Content-Type', 'application/javascript');\n            res.end(await generateRuntimeScript(finalConfig));\n            return;\n          }\n\n          if (req.url === '/__tsd/grpc-client.js') {\n            res.setHeader('Content-Type', 'application/javascript');\n            res.end(await generateGrpcClientBundle());\n            return;\n          }\n\n          if (req.url === '/__tsd/translations.json') {\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify(await translationManager.getTranslations()));\n            return;\n          }\n\n          next();\n        });\n      } catch (error) {\n        console.error('[TSd] Error in configureServer:', error);\n      }\n    },\n\n    transformIndexHtml: {\n      order: 'pre',\n      handler(html, ctx) {\n        console.log('[TSd] Transforming HTML for:', ctx.path);\n        const transformed = transformHtml(html, finalConfig);\n        console.log(\n          '[TSd] HTML transformed, runtime injected:',\n          transformed.includes('__tsd/runtime.js')\n        );\n        return transformed;\n      },\n    },\n\n    async handleHotUpdate({ file, server }) {\n      if (finalConfig.enableHMR && file.endsWith('.svelte')) {\n        // Notify clients about translation updates\n        const translations = await translationManager.getTranslations();\n        server.ws.send({\n          type: 'custom',\n          event: 'tsd:translations-updated',\n          data: translations,\n        });\n      }\n    },\n  };\n}\n\nasync function generateGrpcClientBundle(): Promise<string> {\n  // Return inline gRPC client implementation\n  return `\n    class EnvoyDiscovery {\n      static instance;\n      \n      constructor() {\n        this.config = this.detectEnvironment();\n      }\n      \n      static getInstance() {\n        if (!this.instance) {\n          this.instance = new EnvoyDiscovery();\n        }\n        return this.instance;\n      }\n      \n      detectEnvironment() {\n        const isKubernetes = window.location.hostname.includes('.cluster.local') || \n                            window.location.hostname.includes('.svc');\n        \n        if (isKubernetes) {\n          console.log('[TSd] Detected Kubernetes environment');\n          return {\n            endpoint: window.location.origin,\n            isEnvoy: true,\n            environment: 'kubernetes',\n            protocol: 'grpc-web'\n          };\n        }\n        \n        console.log('[TSd] Running in development mode');\n        return {\n          endpoint: window.location.origin,\n          isEnvoy: false,\n          environment: 'development',\n          protocol: 'http-json'\n        };\n      }\n      \n      getConfig() {\n        return this.config;\n      }\n    }\n    \n    export class TsdGrpcClient {\n      constructor(config) {\n        this.requestCount = 0;\n        this.subscriptions = new Map();\n        this.eventSource = null;\n        \n        this.envoyDiscovery = EnvoyDiscovery.getInstance();\n        this.envoyConfig = this.envoyDiscovery.getConfig();\n        \n        if (this.envoyConfig.isEnvoy) {\n          this.baseUrl = this.envoyConfig.endpoint;\n          console.log(\\`[TSd] \uD83D\uDE80 Using Envoy proxy at \\${this.baseUrl} (\\${this.envoyConfig.environment} environment)\\`);\n        } else {\n          this.baseUrl = \\`\\${window.location.origin}/grpc\\`;\n          console.log(\\`[TSd] \uD83C\uDF10 Using HTTP/JSON at \\${this.baseUrl} (\\${this.envoyConfig.environment} environment)\\`);\n        }\n        \n        console.group('[TSd] Connection Information');\n        console.log('Protocol:', this.envoyConfig.protocol);\n        console.log('Environment:', this.envoyConfig.environment);\n        console.log('Envoy Detected:', this.envoyConfig.isEnvoy);\n        console.log('Base URL:', this.baseUrl);\n        console.groupEnd();\n      }\n      \n      async translate(text, nativeLocale, targetLocale) {\n        const requestId = ++this.requestCount;\n        const startTime = performance.now();\n        \n        console.log(\\`[TSd] \uD83D\uDCE4 Request #\\${requestId}: Translating \"\\${text}\" from \\${nativeLocale} to \\${targetLocale}\\`);\n        \n        try {\n          const headers = {\n            'Content-Type': 'application/json',\n          };\n          \n          if (this.envoyConfig.isEnvoy) {\n            headers['X-Grpc-Web'] = '1';\n            headers['grpc-timeout'] = '10S';\n          }\n          \n          const response = await fetch(\\`\\${this.baseUrl}/tsd.TranslationService/Translate\\`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n              text,\n              native_locale: nativeLocale,\n              target_locale: targetLocale,\n            }),\n          });\n          \n          const endTime = performance.now();\n          const duration = (endTime - startTime).toFixed(2);\n          \n          if (!response.ok) {\n            console.error(\\`[TSd] \u274C Request #\\${requestId} failed: HTTP \\${response.status} (\\${duration}ms)\\`);\n            throw new Error(\\`HTTP error! status: \\${response.status}\\`);\n          }\n          \n          const data = await response.json();\n          const translated = data.translated_text;\n          \n          console.log(\\`[TSd] \u2705 Request #\\${requestId} completed in \\${duration}ms via \\${this.envoyConfig.isEnvoy ? 'Envoy' : 'HTTP'}\\`);\n          console.log(\\`[TSd] \uD83D\uDCE5 Translation: \"\\${text}\" \u2192 \"\\${translated}\"\\`);\n          \n          return translated;\n        } catch (error) {\n          const endTime = performance.now();\n          const duration = (endTime - startTime).toFixed(2);\n          console.error(\\`[TSd] \u274C Request #\\${requestId} error after \\${duration}ms:\\`, error);\n          throw error;\n        }\n      }\n      \n      subscribeToUpdates(callback, locales) {\n        const id = Math.random().toString(36).substring(7);\n        this.subscriptions.set(id, callback);\n        \n        console.log(\\`[TSd] \uD83D\uDD14 Setting up real-time updates via \\${this.envoyConfig.isEnvoy ? 'Envoy gRPC streaming' : 'Server-Sent Events'}\\`);\n        \n        if (this.eventSource) {\n          this.eventSource.close();\n        }\n        \n        const url = new URL(\\`\\${this.baseUrl}/tsd.TranslationService/SubscribeTranslations\\`);\n        if (locales) {\n          url.searchParams.set('locales', locales.join(','));\n        }\n        \n        this.eventSource = new EventSource(url.toString());\n        \n        this.eventSource.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.connected) {\n              console.log(\\`[TSd] \u2705 Real-time updates connected via \\${this.envoyConfig.isEnvoy ? 'Envoy' : 'SSE'}\\`);\n            } else {\n              console.log('[TSd] \uD83D\uDCE8 Translation update received:', data.key);\n              callback(data);\n            }\n          } catch (error) {\n            console.error('[TSd] \u274C Error parsing update:', error);\n          }\n        };\n        \n        this.eventSource.onerror = (error) => {\n          console.error(\\`[TSd] \u274C \\${this.envoyConfig.isEnvoy ? 'Envoy streaming' : 'SSE'} error:\\`, error);\n        };\n        \n        return () => {\n          console.log('[TSd] \uD83D\uDD15 Unsubscribing from real-time updates');\n          if (this.eventSource) {\n            this.eventSource.close();\n            this.eventSource = null;\n          }\n          this.subscriptions.delete(id);\n        };\n      }\n    }\n  `;\n}\n\nasync function generateRuntimeScript(config: Required<TsdConfig>): Promise<string> {\n  return `\n    console.log('[TSd Runtime] Initializing...');\n    \n    window.__TSD_CONFIG__ = ${JSON.stringify({\n      defaultLocale: config.defaultLocale,\n      supportedLocales: config.supportedLocales,\n      envoy: config.envoy || {},\n    })};\n    \n    console.log('[TSd Runtime] Config set:', window.__TSD_CONFIG__);\n\n    // Initialize gRPC-Web client\n    import('/__tsd/grpc-client.js').then(({ TsdGrpcClient }) => {\n      console.log('[TSd Runtime] gRPC client loaded, creating connection...');\n      \n      window.__TSD_GRPC_CLIENT__ = new TsdGrpcClient({\n        host: window.location.hostname,\n        port: 50051,\n        envoy: window.__TSD_CONFIG__.envoy,\n      });\n      \n      // Subscribe to translation updates\n      window.__TSD_GRPC_CLIENT__.subscribeToUpdates((update) => {\n        window.dispatchEvent(new CustomEvent('tsd:translation-update', { detail: update }));\n      });\n      \n      console.log('[TSd Runtime] gRPC client initialized');\n    }).catch(error => {\n      console.error('[TSd Runtime] Failed to load gRPC client:', error);\n    });\n\n    // Listen for HMR updates\n    if (import.meta.hot) {\n      import.meta.hot.on('tsd:translations-updated', (data) => {\n        window.dispatchEvent(new CustomEvent('tsd:translations-updated', { detail: data }));\n      });\n    }\n  `;\n}\n"],
  "mappings": "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",
  "names": ["server"]
}
