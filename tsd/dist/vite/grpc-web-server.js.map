{
  "version": 3,
  "sources": ["../../src/vite/grpc-web-server.ts"],
  "sourcesContent": ["import express from 'express';\nimport cors from 'cors';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nimport * as path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { ViteDevServer } from 'vite';\nimport type { Server } from 'http';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport function createGrpcWebServer(viteServer: ViteDevServer, translationManager: any) {\n  const app = express();\n\n  // Configure CORS for gRPC-Web\n  app.use(\n    cors({\n      origin: true,\n      credentials: true,\n      exposedHeaders: ['grpc-status', 'grpc-message', 'grpc-encoding', 'grpc-status-details-bin'],\n      allowedHeaders: [\n        'x-grpc-web',\n        'grpc-timeout',\n        'content-type',\n        'x-user-agent',\n        'grpc-encoding',\n        'grpc-accept-encoding',\n      ],\n    })\n  );\n\n  app.use(express.json());\n\n  // Load proto file\n  const PROTO_PATH = path.join(__dirname, '../proto/translation.proto');\n\n  const packageDefinition = protoLoader.loadSync(PROTO_PATH, {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n  });\n\n  const proto = grpc.loadPackageDefinition(packageDefinition) as any;\n\n  // Track subscribed clients for Server-Sent Events\n  const subscribers = new Map<string, any>();\n\n  // Implement gRPC-Web endpoints using REST/JSON\n\n  // Single translation endpoint\n  app.post('/tsd.TranslationService/Translate', async (req: any, res: any) => {\n    const { text, native_locale, target_locale } = req.body;\n\n    console.log('[TSd gRPC-Web] Translate request:', { text, native_locale, target_locale });\n\n    try {\n      const keyMonad = await translationManager.addTranslationRequest(text, native_locale);\n      const key = await keyMonad.getOrElse('');\n      \n      const translatedMonad = await translationManager.getOrCreateTranslation(\n        text,\n        native_locale,\n        target_locale\n      );\n      \n      const translated = await translatedMonad.getOrElse(text);\n\n      console.log('[TSd gRPC-Web] Translation response:', { key, translated });\n\n      res.json({\n        key,\n        text,\n        native_locale,\n        target_locale,\n        translated_text: translated,\n        timestamp: Date.now().toString(),\n      });\n\n      // Notify subscribers\n      broadcastUpdate(key);\n    } catch (error: any) {\n      console.error('[TSd gRPC-Web] Translation error:', error);\n      res.status(500).json({\n        code: 13, // INTERNAL\n        message: error.message,\n        details: error.stack,\n      });\n    }\n  });\n\n  // Get all translations endpoint\n  app.post('/tsd.TranslationService/GetTranslations', async (req: any, res: any) => {\n    const { locale } = req.body;\n\n    try {\n      const translations = await translationManager.getTranslations();\n\n      // Convert to gRPC-Web format\n      const formattedTranslations: Record<string, any> = {};\n      for (const [key, entry] of Object.entries(translations)) {\n        formattedTranslations[key] = {\n          key,\n          text: (entry as any).text,\n          native_locale: (entry as any).nativeLocale,\n          translations: (entry as any).translations || {},\n        };\n      }\n\n      res.json({ translations: formattedTranslations });\n    } catch (error: any) {\n      res.status(500).json({\n        code: 13, // INTERNAL\n        message: error.message,\n      });\n    }\n  });\n\n  // Subscribe to updates using Server-Sent Events\n  app.get('/tsd.TranslationService/SubscribeTranslations', (req: any, res: any) => {\n    const id = Math.random().toString(36).substring(7);\n\n    res.setHeader('Content-Type', 'text/event-stream');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.setHeader('Connection', 'keep-alive');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n\n    // Send initial connection message\n    res.write('data: {\"connected\": true}\\n\\n');\n\n    subscribers.set(id, res);\n\n    console.log('[TSd gRPC-Web] Client subscribed:', id);\n\n    req.on('close', () => {\n      console.log('[TSd gRPC-Web] Client unsubscribed:', id);\n      subscribers.delete(id);\n    });\n  });\n\n  // Broadcast updates to all subscribers\n  async function broadcastUpdate(key: string) {\n    const translations = await translationManager.getTranslations();\n    const entry = translations[key];\n\n    if (entry) {\n      const update = {\n        key,\n        entry: {\n          key,\n          text: entry.text,\n          native_locale: entry.nativeLocale,\n          translations: entry.translations || {},\n        },\n        action: 'updated',\n      };\n\n      const message = `data: ${JSON.stringify(update)}\\n\\n`;\n\n      subscribers.forEach((res, id) => {\n        try {\n          res.write(message);\n        } catch (error) {\n          console.error('[TSd gRPC-Web] Error broadcasting update:', error);\n          subscribers.delete(id);\n        }\n      });\n    }\n  }\n\n  // Mount the express app as middleware\n  viteServer.middlewares.use('/grpc', app);\n\n  console.log('[TSd gRPC-Web] Server initialized on /grpc/*');\n\n  return {\n    broadcast: broadcastUpdate,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
