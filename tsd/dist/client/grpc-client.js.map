{
  "version": 3,
  "sources": ["../../src/client/grpc-client.ts"],
  "sourcesContent": ["import { EnvoyDiscovery } from '../lib/envoy-discovery.js';\n\nexport interface GrpcClientConfig {\n  host: string;\n  port: number;\n  envoy?: {\n    autoDiscover?: boolean;\n    endpoint?: string;\n    kubernetesNamespace?: string;\n    serviceName?: string;\n  };\n}\n\nexport class TsdGrpcClient {\n  private baseUrl: string;\n  private subscriptions: Map<string, (update: any) => void> = new Map();\n  private eventSource: EventSource | null = null;\n  private envoyDiscovery: EnvoyDiscovery;\n  private requestCount = 0;\n  private envoyConfig: any;\n\n  constructor(config: GrpcClientConfig) {\n    this.envoyDiscovery = EnvoyDiscovery.getInstance();\n    \n    // Check for configured Envoy endpoint from window config\n    if (typeof window !== 'undefined' && (window as any).__TSD_CONFIG__?.envoy?.endpoint) {\n      const envoyEndpoint = (window as any).__TSD_CONFIG__.envoy.endpoint;\n      console.log(`[TSd] \uD83C\uDFAF Using configured Envoy endpoint: ${envoyEndpoint}`);\n      this.envoyDiscovery.setConfig({\n        endpoint: envoyEndpoint,\n        isEnvoy: true,\n        environment: 'production',\n        protocol: 'grpc-web'\n      });\n    }\n    \n    this.envoyConfig = this.envoyDiscovery.getConfig();\n\n    // Use discovered endpoint or fallback to origin\n    if (this.envoyConfig.isEnvoy) {\n      this.baseUrl = this.envoyConfig.endpoint;\n      console.log(\n        `[TSd] \uD83D\uDE80 Using Envoy proxy at ${this.baseUrl} (${this.envoyConfig.environment} environment)`\n      );\n    } else {\n      // Check if we're in development mode (Vite dev server with gRPC support)\n      const isDevelopment = window.location.hostname === 'localhost' || \n                           window.location.hostname === '127.0.0.1' ||\n                           window.location.hostname.startsWith('192.168.') ||\n                           window.location.hostname.includes('.local');\n      \n      if (isDevelopment) {\n        this.baseUrl = `${window.location.origin}/grpc`;\n        console.log(\n          `[TSd] \uD83C\uDF10 Using development gRPC server at ${this.baseUrl}`\n        );\n      } else {\n        // In production, use the SvelteKit API endpoint\n        this.baseUrl = `${window.location.origin}/api`;\n        console.log(\n          `[TSd] \uD83C\uDF10 Using production API at ${this.baseUrl}`\n        );\n      }\n    }\n\n    this.logConnectionInfo();\n  }\n\n  private logConnectionInfo(): void {\n    console.group('[TSd] Connection Information');\n    console.log('Protocol:', this.envoyConfig.protocol);\n    console.log('Environment:', this.envoyConfig.environment);\n    console.log('Envoy Detected:', this.envoyConfig.isEnvoy);\n    console.log('Base URL:', this.baseUrl);\n    console.groupEnd();\n  }\n\n  async translate(text: string, nativeLocale: string, targetLocale: string): Promise<string> {\n    const requestId = ++this.requestCount;\n    const startTime = performance.now();\n\n    console.log(\n      `[TSd] \uD83D\uDCE4 Request #${requestId}: Translating \"${text}\" from ${nativeLocale} to ${targetLocale}`\n    );\n\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n\n      // Add gRPC-Web headers if using Envoy\n      if (this.envoyConfig.isEnvoy) {\n        headers['X-Grpc-Web'] = '1';\n        headers['grpc-timeout'] = '10S';\n      }\n\n      let url: string;\n      let requestBody: any;\n      \n      if (this.envoyConfig.isEnvoy || this.baseUrl.includes('/grpc')) {\n        // Use gRPC-style endpoint for Envoy or development\n        url = `${this.baseUrl}/tsd.TranslationService/Translate`;\n        requestBody = {\n          text,\n          native_locale: nativeLocale,\n          target_locale: targetLocale,\n        };\n      } else {\n        // Use SvelteKit API endpoint for production\n        url = `${this.baseUrl}/translate`;\n        requestBody = {\n          text,\n          from: nativeLocale,\n          to: targetLocale,\n        };\n      }\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(requestBody),\n      });\n\n      const endTime = performance.now();\n      const duration = (endTime - startTime).toFixed(2);\n\n      if (!response.ok) {\n        console.error(\n          `[TSd] \u274C Request #${requestId} failed: HTTP ${response.status} (${duration}ms)`\n        );\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Handle different response formats\n      const translated = data.translated_text || data.translated || text;\n\n      console.log(\n        `[TSd] \u2705 Request #${requestId} completed in ${duration}ms via ${this.envoyConfig.isEnvoy ? 'Envoy' : this.baseUrl.includes('/grpc') ? 'gRPC' : 'API'}`\n      );\n      console.log(`[TSd] \uD83D\uDCE5 Translation: \"${text}\" \u2192 \"${translated}\"`);\n\n      return translated;\n    } catch (error) {\n      const endTime = performance.now();\n      const duration = (endTime - startTime).toFixed(2);\n      console.error(`[TSd] \u274C Request #${requestId} error after ${duration}ms:`, error);\n      throw error;\n    }\n  }\n\n  async getTranslations(locale?: string): Promise<Record<string, any>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/tsd.TranslationService/GetTranslations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Grpc-Web': '1',\n        },\n        body: JSON.stringify({ locale }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.translations || {};\n    } catch (error) {\n      console.error('[TSd gRPC Client] Get translations error:', error);\n      throw error;\n    }\n  }\n\n  subscribeToUpdates(callback: (update: any) => void, locales?: string[]): () => void {\n    const id = Math.random().toString(36).substring(7);\n    this.subscriptions.set(id, callback);\n\n    console.log(\n      `[TSd] \uD83D\uDD14 Setting up real-time updates via ${this.envoyConfig.isEnvoy ? 'Envoy gRPC streaming' : 'Server-Sent Events'}`\n    );\n\n    // Close existing connection if any\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n\n    // Create Server-Sent Events connection\n    let sseUrl: string;\n    if (this.envoyConfig.isEnvoy || this.baseUrl.includes('/grpc')) {\n      sseUrl = `${this.baseUrl}/tsd.TranslationService/SubscribeTranslations`;\n    } else {\n      // For production API, we might not have SSE support - skip subscription\n      console.log('[TSd] SSE not available in production mode, skipping real-time updates');\n      return () => {\n        this.subscriptions.delete(id);\n      };\n    }\n    \n    const url = new URL(sseUrl);\n    if (locales) {\n      url.searchParams.set('locales', locales.join(','));\n    }\n\n    this.eventSource = new EventSource(url.toString());\n\n    this.eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.connected) {\n          console.log(\n            `[TSd] \u2705 Real-time updates connected via ${this.envoyConfig.isEnvoy ? 'Envoy' : 'SSE'}`\n          );\n        } else {\n          console.log('[TSd] \uD83D\uDCE8 Translation update received:', data.key);\n          callback(data);\n        }\n      } catch (error) {\n        console.error('[TSd] \u274C Error parsing update:', error);\n      }\n    };\n\n    this.eventSource.onerror = (error) => {\n      console.error(\n        `[TSd] \u274C ${this.envoyConfig.isEnvoy ? 'Envoy streaming' : 'SSE'} error:`,\n        error\n      );\n    };\n\n    // Return unsubscribe function\n    return () => {\n      console.log('[TSd] \uD83D\uDD15 Unsubscribing from real-time updates');\n      if (this.eventSource) {\n        this.eventSource.close();\n        this.eventSource = null;\n      }\n      this.subscriptions.delete(id);\n    };\n  }\n}\n\n// Export for browser usage\nif (typeof window !== 'undefined') {\n  (window as any).TsdGrpcClient = TsdGrpcClient;\n}\n"],
  "mappings": "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",
  "names": []
}
